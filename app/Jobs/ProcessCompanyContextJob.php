<?php

namespace App\Jobs;

use App\Models\Autoseo\Autoseo;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ProcessCompanyContextJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $autoseoId;
    public $originalContext;

    /**
     * N√∫mero de intentos
     */
    public $tries = 3;

    /**
     * Timeout del job (2 minutos)
     */
    public $timeout = 120;

    /**
     * Create a new job instance.
     */
    public function __construct($autoseoId, $originalContext)
    {
        $this->autoseoId = $autoseoId;
        $this->originalContext = $originalContext;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        try {
            Log::info("ü§ñ [Job] Procesando contexto empresarial para Autoseo ID: {$this->autoseoId}");
            Log::info("üìù [Job] Texto original (" . strlen($this->originalContext) . " caracteres)");

            // Llamar a la IA (timeout de 100 segundos)
            $response = Http::timeout(100)
                ->post('https://aiapi.hawkins.es/chat', [
                    'modelo' => 'gpt-oss:120b-cloud',
                    'prompt' => "Contexto de empresa a procesar:\n\n" . $this->originalContext . "\n\nINSTRUCCIONES:\n- Si el texto es demasiado largo (>1200 caracteres): Res√∫melo manteniendo la informaci√≥n clave. Es vital que no inventes informacion, solo expande la existente, no te inventes la capacidad de la empresa, ni servicios, ni ubicaciones. Basate en el contexto existente.\n- Si el texto es muy corto (<800 caracteres): Ampl√≠alo con detalles profesionales relevantes.\n- Objetivo: Aproximadamente 1000 caracteres.\n- IMPORTANTE: Devuelve √öNICAMENTE el texto procesado, sin introducciones, sin explicaciones, sin frases como 'Aqu√≠ est√° el resumen' ni nada similar. Solo el texto final.\n\nTexto procesado:",
                    'stream' => false,
                    'temperature' => 0.7
                ]);

            if ($response->successful()) {
                $data = $response->json();
                
                // Buscar la respuesta en diferentes campos posibles (Ollama usa "respuesta")
                $processedContext = $data['respuesta'] ?? $data['response'] ?? $data['text'] ?? $data['message'] ?? null;

                if ($processedContext && !empty(trim($processedContext))) {
                    $processedContext = trim($processedContext);
                    
                    // Actualizar el registro en la base de datos
                    $autoseo = Autoseo::find($this->autoseoId);
                    if ($autoseo) {
                        $autoseo->company_context = $processedContext;
                        $autoseo->save();

                        Log::info("‚úÖ [Job] Contexto procesado y actualizado (" . strlen($processedContext) . " caracteres)");
                        Log::info("üìù [Job] Resultado: " . substr($processedContext, 0, 300) . "...");
                    } else {
                        Log::error("‚ùå [Job] No se encontr√≥ el cliente Autoseo ID: {$this->autoseoId}");
                    }
                } else {
                    Log::error("‚ùå [Job] La IA devolvi√≥ un contexto vac√≠o o inv√°lido");
                    Log::error("üìù [Job] Respuesta completa de IA: " . json_encode($data));
                    // Mantener el contexto original, ya est√° guardado
                }
            } else {
                Log::error("‚ùå [Job] Error al comunicar con IA (HTTP " . $response->status() . ")");
                Log::error("‚ùå [Job] URL: https://aiapi.hawkins.es/chat");
                Log::error("‚ùå [Job] Modelo: gpt-oss:120b-cloud");
                Log::error("‚ùå [Job] Respuesta del servidor: " . $response->body());
                Log::error("‚ùå [Job] Headers de respuesta: " . json_encode($response->headers()));
                // Mantener el contexto original, ya est√° guardado
            }

        } catch (\Exception $e) {
            Log::error("‚ùå [Job] Error procesando contexto: " . $e->getMessage());
            Log::error("Stack trace: " . $e->getTraceAsString());
            
            // No lanzar excepci√≥n para que no se reintente si es un error de IA
            if ($this->attempts() >= $this->tries) {
                Log::info("‚ÑπÔ∏è [Job] Se alcanz√≥ el n√∫mero m√°ximo de intentos, manteniendo contexto original");
            }
        }
    }

    /**
     * Handle a job failure.
     */
    public function failed(\Throwable $exception): void
    {
        Log::error("‚ùå [Job] Fall√≥ completamente el procesamiento del contexto para Autoseo ID: {$this->autoseoId}");
        Log::error("Error: " . $exception->getMessage());
        // El contexto original ya est√° guardado, no hacer nada m√°s
    }
}
