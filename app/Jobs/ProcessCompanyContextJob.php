<?php

namespace App\Jobs;

use App\Models\Autoseo\Autoseo;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ProcessCompanyContextJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $autoseoId;
    public $originalContext;

    /**
     * N√∫mero de intentos
     */
    public $tries = 3;

    /**
     * Timeout del job (2 minutos)
     */
    public $timeout = 120;

    /**
     * Create a new job instance.
     */
    public function __construct($autoseoId, $originalContext)
    {
        $this->autoseoId = $autoseoId;
        $this->originalContext = $originalContext;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        try {
            Log::info("========================================");
            Log::info("üöÄ [Job] INICIO - ProcessCompanyContextJob");
            Log::info("========================================");
            Log::info("ü§ñ [Job] Procesando contexto empresarial para Autoseo ID: {$this->autoseoId}");
            Log::info("üìù [Job] Texto original (" . strlen($this->originalContext) . " caracteres)");
            Log::info("üìù [Job] Preview texto: " . substr($this->originalContext, 0, 100) . "...");
            
            $url = 'https://aiapi.hawkins.es/chat';
            $modelo = 'gpt-oss:120b-cloud';
            $apiKey = 'OllamaAPI_2024_K8mN9pQ2rS5tU7vW3xY6zA1bC4eF8hJ0lM';
            
            Log::info("üåê [Job] Preparando petici√≥n HTTP");
            Log::info("üåê [Job] URL: {$url}");
            Log::info("üåê [Job] Modelo: {$modelo}");
            Log::info("üåê [Job] API Key (primeros 20 chars): " . substr($apiKey, 0, 20) . "...");
            Log::info("üåê [Job] Timeout: 100 segundos");
            
            $prompt = "Contexto de empresa a procesar:\n\n" . $this->originalContext . "\n\nINSTRUCCIONES:\n- Si el texto es demasiado largo (>1200 caracteres): Res√∫melo manteniendo la informaci√≥n clave. Es vital que no inventes informacion, solo expande la existente, no te inventes la capacidad de la empresa, ni servicios, ni ubicaciones. Basate en el contexto existente.\n- Si el texto es muy corto (<800 caracteres): Ampl√≠alo con detalles profesionales relevantes.\n- Objetivo: Aproximadamente 1000 caracteres.\n- IMPORTANTE: Devuelve √öNICAMENTE el texto procesado, sin introducciones, sin explicaciones, sin frases como 'Aqu√≠ est√° el resumen' ni nada similar. Solo el texto final.\n\nTexto procesado:";
            
            Log::info("üì§ [Job] Enviando petici√≥n a la API de IA...");
            
            // Llamar a la IA (timeout de 100 segundos)
            $response = Http::timeout(100)
                ->withHeaders([
                    'X-Api-Key' => $apiKey,
                    'Content-Type' => 'application/json',
                ])
                ->post($url, [
                    'modelo' => $modelo,
                    'prompt' => $prompt,
                    'stream' => false,
                    'temperature' => 0.7
                ]);
            
            Log::info("üì• [Job] Respuesta recibida");
            Log::info("üìä [Job] Status Code: " . $response->status());
            Log::info("üìä [Job] Successful: " . ($response->successful() ? 'S√ç' : 'NO'));

            if ($response->successful()) {
                Log::info("‚úÖ [Job] Respuesta HTTP exitosa (200)");
                
                $responseBody = $response->body();
                Log::info("üìÑ [Job] Cuerpo de respuesta (primeros 500 chars): " . substr($responseBody, 0, 500) . "...");
                
                $data = $response->json();
                Log::info("üìã [Job] JSON parseado correctamente");
                Log::info("üìã [Job] Campos disponibles en respuesta: " . implode(', ', array_keys($data)));
                
                // Buscar la respuesta en diferentes campos posibles (Ollama usa "respuesta")
                $processedContext = $data['respuesta'] ?? $data['response'] ?? $data['text'] ?? $data['message'] ?? null;
                
                Log::info("üîç [Job] Campo 'respuesta' encontrado: " . (isset($data['respuesta']) ? 'S√ç' : 'NO'));
                Log::info("üîç [Job] Campo 'response' encontrado: " . (isset($data['response']) ? 'S√ç' : 'NO'));
                Log::info("üîç [Job] Campo 'text' encontrado: " . (isset($data['text']) ? 'S√ç' : 'NO'));
                Log::info("üîç [Job] Campo 'message' encontrado: " . (isset($data['message']) ? 'S√ç' : 'NO'));

                if ($processedContext && !empty(trim($processedContext))) {
                    $processedContext = trim($processedContext);
                    Log::info("‚úÖ [Job] Contexto procesado v√°lido (" . strlen($processedContext) . " caracteres)");
                    
                    // Actualizar el registro en la base de datos
                    Log::info("üíæ [Job] Buscando cliente Autoseo ID: {$this->autoseoId}");
                    $autoseo = Autoseo::find($this->autoseoId);
                    
                    if ($autoseo) {
                        Log::info("‚úÖ [Job] Cliente encontrado: {$autoseo->client_name}");
                        
                        $autoseo->company_context = $processedContext;
                        $autoseo->save();

                        Log::info("‚úÖ [Job] Contexto actualizado en base de datos");
                        Log::info("üìù [Job] Resultado final: " . substr($processedContext, 0, 300) . "...");
                        Log::info("========================================");
                        Log::info("üéâ [Job] FIN - Procesamiento exitoso");
                        Log::info("========================================");
                    } else {
                        Log::error("‚ùå [Job] No se encontr√≥ el cliente Autoseo ID: {$this->autoseoId}");
                        Log::error("========================================");
                        
                        // Lanzar excepci√≥n para que el job se marque como fallido
                        throw new \Exception("No se encontr√≥ el cliente Autoseo ID: {$this->autoseoId}");
                    }
                } else {
                    Log::error("‚ùå [Job] La IA devolvi√≥ un contexto vac√≠o o inv√°lido");
                    Log::error("üìù [Job] Valor de processedContext: " . var_export($processedContext, true));
                    Log::error("üìù [Job] Respuesta completa de IA: " . json_encode($data, JSON_PRETTY_PRINT));
                    Log::error("========================================");
                    
                    // Lanzar excepci√≥n para que el job se marque como fallido
                    throw new \Exception("La IA devolvi√≥ un contexto vac√≠o o inv√°lido. Respuesta: " . json_encode($data));
                }
            } else {
                Log::error("========================================");
                Log::error("‚ùå [Job] ERROR HTTP - Respuesta no exitosa");
                Log::error("========================================");
                Log::error("‚ùå [Job] Status Code: " . $response->status());
                Log::error("‚ùå [Job] Reason: " . $response->reason());
                Log::error("‚ùå [Job] URL: https://aiapi.hawkins.es/chat");
                Log::error("‚ùå [Job] Modelo: gpt-oss:120b-cloud");
                Log::error("‚ùå [Job] Cuerpo de respuesta completo: " . $response->body());
                Log::error("‚ùå [Job] Headers de respuesta: " . json_encode($response->headers(), JSON_PRETTY_PRINT));
                Log::error("========================================");
                
                // Lanzar excepci√≥n para que el job se marque como fallido
                throw new \Exception("Error al comunicar con IA: HTTP " . $response->status() . " - " . $response->body());
            }

        } catch (\Exception $e) {
            Log::error("========================================");
            Log::error("üí• [Job] EXCEPCI√ìN CAPTURADA");
            Log::error("========================================");
            Log::error("‚ùå [Job] Tipo de excepci√≥n: " . get_class($e));
            Log::error("‚ùå [Job] Mensaje: " . $e->getMessage());
            Log::error("‚ùå [Job] Archivo: " . $e->getFile());
            Log::error("‚ùå [Job] L√≠nea: " . $e->getLine());
            Log::error("‚ùå [Job] Intento actual: " . $this->attempts());
            Log::error("‚ùå [Job] M√°ximo de intentos: " . $this->tries);
            Log::error("üìú [Job] Stack trace:");
            Log::error($e->getTraceAsString());
            Log::error("========================================");
            
            // Relanzar la excepci√≥n para que Laravel marque el job como fallido
            // y lo reintente seg√∫n la configuraci√≥n
            throw $e;
        }
    }

    /**
     * Handle a job failure.
     */
    public function failed(\Throwable $exception): void
    {
        Log::error("========================================");
        Log::error("‚ò†Ô∏è [Job] JOB FALLIDO DEFINITIVAMENTE");
        Log::error("========================================");
        Log::error("‚ùå [Job] Autoseo ID: {$this->autoseoId}");
        Log::error("‚ùå [Job] Se agotaron los " . $this->tries . " intentos");
        Log::error("‚ùå [Job] √öltimo error: " . $exception->getMessage());
        Log::error("‚ùå [Job] Tipo de excepci√≥n: " . get_class($exception));
        Log::error("üìù [Job] Texto original guardado (no se pudo procesar con IA)");
        Log::error("========================================");
        // El contexto original ya est√° guardado, no hacer nada m√°s
    }
}
