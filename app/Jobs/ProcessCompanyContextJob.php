<?php

namespace App\Jobs;

use App\Models\Autoseo\Autoseo;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ProcessCompanyContextJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $autoseoId;
    public $originalContext;

    /**
     * N√∫mero de intentos
     */
    public $tries = 3;

    /**
     * Timeout del job (2 minutos)
     */
    public $timeout = 120;

    /**
     * Create a new job instance.
     */
    public function __construct($autoseoId, $originalContext)
    {
        $this->autoseoId = $autoseoId;
        $this->originalContext = $originalContext;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        try {
            Log::info("ü§ñ [Job] Procesando contexto para Autoseo ID: {$this->autoseoId} (" . strlen($this->originalContext) . " caracteres)");
            
            // Llamar a la IA (timeout de 100 segundos)
            $response = Http::timeout(100)
                ->post('https://aiapi.hawkins.es/chat/chat', [
                    'modelo' => 'gpt-oss:120b-cloud',
                    'prompt' => "CONTEXTO DEL SISTEMA:\nEres un procesador de informaci√≥n empresarial. El texto que vas a procesar es una descripci√≥n de una empresa que ser√° usada como CONTEXTO DE REFERENCIA por otra IA de generaci√≥n de contenido SEO.\n\nCuando la IA de contenido reciba este contexto, lo usar√° para:\n- Escribir art√≠culos de blog relacionados con los servicios de la empresa\n- Crear descripciones de productos/servicios\n- Generar contenido optimizado para SEO\n- Responder preguntas sobre la empresa\n\nPor lo tanto, este texto debe ser FACTUAL, COMPLETO y ESTRUCTURADO para que la IA de contenido NO tenga que inventar informaci√≥n cuando genere textos.\n\nTEXTO ORIGINAL A PROCESAR:\n\n" . $this->originalContext . "\n\nTU TAREA:\nOptimiza este texto para que sirva como contexto de referencia claro y √∫til. La IA de contenido necesita saber exactamente:\n- Qu√© servicios ofrece la empresa (espec√≠ficos, no gen√©ricos)\n- D√≥nde opera (ciudades, regiones, pa√≠ses)\n- Qu√© especialidades o sectores cubre\n- Cualquier dato factual relevante (a√±os de experiencia, certificaciones, etc.)\n\nREGLAS ESTRICTAS:\n‚ùå NO inventes servicios, ubicaciones, capacidades o datos que no est√©n en el texto original\n‚ùå NO a√±adas informaci√≥n que no est√© expl√≠cita o claramente impl√≠cita\n‚ùå NO uses lenguaje promocional o de ventas\n‚ùå NO exageres ni embellezas la informaci√≥n\n\n‚úÖ S√ç reformula para mayor claridad\n‚úÖ S√ç estructura la informaci√≥n de forma l√≥gica\n‚úÖ S√ç corrige errores gramaticales\n‚úÖ S√ç mant√©n TODOS los datos factuales del original\n\nLONGITUD:\n- Si >1200 caracteres: Resume pero mant√©n TODOS los servicios, ubicaciones y datos clave\n- Si <800 caracteres: Ampl√≠a SOLO clarificando o contextualizando lo ya mencionado\n- Objetivo: ~1000 caracteres, texto neutro, factual y estructurado\n\nFORMATO DE SALIDA:\nDevuelve √öNICAMENTE el texto optimizado, sin introducciones, sin 'Aqu√≠ est√°...', sin explicaciones. Solo el contexto procesado.\n\nTexto optimizado:",
                    'stream' => false,
                    'temperature' => 0.3
                ]);

            if ($response->successful()) {
                $data = $response->json();
                
                // Buscar la respuesta en diferentes campos posibles (Ollama usa "respuesta")
                $processedContext = $data['respuesta'] ?? $data['response'] ?? $data['text'] ?? $data['message'] ?? null;

                if ($processedContext && !empty(trim($processedContext))) {
                    $processedContext = trim($processedContext);
                    
                    // Actualizar el registro en la base de datos
                    $autoseo = Autoseo::find($this->autoseoId);
                    if ($autoseo) {
                        $autoseo->company_context = $processedContext;
                        $autoseo->save();

                        Log::info("‚úÖ [Job] Contexto procesado y actualizado (" . strlen($processedContext) . " caracteres)");
                    } else {
                        Log::error("‚ùå [Job] No se encontr√≥ el cliente Autoseo ID: {$this->autoseoId}");
                        throw new \Exception("No se encontr√≥ el cliente Autoseo ID: {$this->autoseoId}");
                    }
                } else {
                    Log::error("‚ùå [Job] La IA devolvi√≥ un contexto vac√≠o. Respuesta: " . json_encode($data));
                    throw new \Exception("La IA devolvi√≥ un contexto vac√≠o o inv√°lido");
                }
            } else {
                Log::error("‚ùå [Job] Error HTTP " . $response->status() . " - " . $response->body());
                throw new \Exception("Error al comunicar con IA: HTTP " . $response->status());
            }

        } catch (\Exception $e) {
            Log::error("‚ùå [Job] Error: " . $e->getMessage() . " (Intento " . $this->attempts() . "/" . $this->tries . ")");
            throw $e;
        }
    }

    /**
     * Handle a job failure.
     */
    public function failed(\Throwable $exception): void
    {
        Log::error("‚ò†Ô∏è [Job] Fallido definitivamente para Autoseo ID: {$this->autoseoId} - " . $exception->getMessage());
    }
}
